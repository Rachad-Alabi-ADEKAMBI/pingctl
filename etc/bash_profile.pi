#!/usr/bin/env sh
##############################################################################
# Aliases of commonly used commands related to the
#   - Ping Identity DevOps Program.
#
# Recommend that you source this file from your ~/.bash_profile or ~/.bashrc
# Just add following line without the preceeding comment
#
#  . {path to this directory}/bash_profile_devops
#
##############################################################################

bold=$(tput bold)
normal=$(tput sgr0)

pdo()
{
    run cd "${PING_IDENTITY_DEVOPS_HOME}/$*"
}

alias pdog="pdo pingidentity-devops-getting-started"
alias pdob="pdo pingidentity-docker-builds"
alias pdos="pdo pingidentity-server-profiles"


## dhelp
dhelp ()
{
cat <<EOHELP
+----------------------------------------------------------------------------+
|                   ${bold}Ping Identity Docker Helper Aliases${normal}                      |
+----------------------------------------------------------------------------+
 ${bold}Container${normal}                                 ${bold}Image${normal}
 -------------------------------------     ----------------------------------
 dce - execute commands (i.e. /bin/sh)     dib - build
 dci - inspect                             dii - inspect
 dcl - list                                dil - list
 dcr - remove forcefully                   dir - remove forcefully
 dcp - prune                               dip - prune
 dct - run top                             dit - tag
 dcstop  - stop                            diw - remove pingidentity images
 dcstart - start
 dck    - stop
 dlogs  - tail logs
 dsa - docker stop all
 dra - docker remove all

 ${bold}Volume${normal}                    ${bold}Network${normal}                   ${bold}Service${normal}
 ------------------------  ------------------------  ------------------------
 dvc - create              dnc - create              dsl - list
 dvi - inspect             dni - inspect             dss - scale
 dvl - list                dnl - list                dsr - remove
 dvp - prune               dnp - prune
 dvr - remove              dnr - remove

 ${bold}Docker Compose${normal}
 ------------------------
 dpu - up (detached)
 dpd - down
 dpp - ps
 dpl - logs (w/ -f)

 ${bold}Special${normal}
 ----------------------------------------------------------------------------
 ddc - deep clean (cont, vol, net)
 dnuke - deletes everything from local docker unused data

 pingdownload - download product or license to ~/Downloads
 pdog - cd to 'pingidentity-devops-getting-started' directory
 pdob - cd to 'pingidentity-docker-builds' directory
 pdos - cd to 'pingidentity-server-profiles' directory
 ----------------------------------------------------------------------------
EOHELP
}

## denv
denv ()
{
  echo "
denv alias has been deprecated. Please use:

   ping-devops info
"
}

run ()
{
  #date
  echo "Alias Expansion: ${bold}$*${normal}"
  #time $*
  "$@"
}

# PingDownload alias
alias pingdownload="run docker run --env-file ~/.pingidentity/devops --rm -v ~/Downloads:/tmp pingidentity/pingdownloader"

# Docker
alias dps="run docker ps"

# Stop all running containers
dsa()
{
  echo "Running command to: ${bold}Stop all running containers${normal}";
  if ! test -z $(docker container ls -a -q) ; then
    docker container stop $(docker container ls -a -q)
  else
    echo "No containers found to stop"
  fi
}

# Remove all stopped containers
dra()
{
  echo "Running command to: ${bold}Remove all stopped containers${normal}";
  if ! test -z $(docker container ls -a -q) ; then
    docker container rm $(docker container ls -a -q)
  else
    echo "No containers found to remove"
  fi
}
alias dce="run docker container exec -it"
alias dci="run docker container inspect"
alias dcl="run docker container ls -a"
alias dcr="run docker container rm -f"
alias dcp="run docker container prune -f"
alias dcstop="run docker container stop"
alias dct="run docker container top"
alias dck="dcstop"
alias dcstart="run docker container start"
alias dlogs="run docker logs -f"

## image
alias dib="run docker image build"
alias dii="run docker image inspect"
alias dil="run docker images"
alias dir="run docker image rm -f"
alias dip="run docker image prune -f"
alias dit="run docker image tag"

# Remove all Ping Identity docker images
diw()
{
  echo "Running command to: ${bold}Remove all Ping Identity Docker images${normal}";
  dip;
  if [ -n "$(docker images 'pingidentity/*' -q|sort|uniq)" ]; then
    run docker image rm docker rmi -f $(docker image ls --format '{{.Repository}} {{.ID}}' "pingidentity/*")
  else
    echo "***No Ping Identity images present to remove***"
  fi
}
# Remove all docker images
din()
{
  echo "Running command to: ${bold}Remove all Docker images${normal}";
  dip;
  i="$( docker images --format '{{.ID}}' )"
  if [ -n "${i}" ]; then
    run docker image rm "${i}";
  else
    echo "***No images present to remove***"
  fi
}

## volume
alias dvc="run docker volume create"
alias dvi="run docker volume inspect"
alias dvl="run docker volume ls"
alias dvp="run docker volume prune -f"
alias dvr="run docker volume rm"

## network
alias dnc="run docker network create"
alias dni="run docker network inspect"
alias dnl="run docker network ls"
alias dnp="run docker network prune -f"
alias dnr="run docker network rm"


## service
alias dsl="run docker service ls"
alias dss="run docker service scale"
alias dsr="run docker service rm"

## docker-compose
alias dpu="run docker-compose up -d"
alias dpd="run docker-compose down"
alias dpp="run docker-compose ps"
alias dpl="run docker-compose logs -f"

## logs
alias dlf="run docker logs -f"

## deep clean
alias ddc="dcp ; dvp ; dip; dnp"

## delete everything from docker spaces
alias dnuke="docker system prune -af"

## kenv
kenv ()
{
  echo "
kenv alias has been deprecated. Please use:

   ping-devops info
"
}

## khelp
khelp ()
{
cat <<EOHELP
+----------------------------------------------------------------------------+
|                   ${bold}Ping Identity DevOps Kubernetes Aliases${normal}                  |
+----------------------------------------------------------------------------+
 ${bold}k8s Information${normal}
 -------------------------------------
 kubectx - get kubernetes context info
 kubens - get kubernetes namespace info

 ${bold}General Info${normal}
 -------------------------------------
 kall - get k8s objects in namespace
 kd, kdescribe - describe

 ${bold}Get${normal}                                       ${bold}Describe${normal}
 -------------------------------------     ----------------------------------
 kg, kget - get {type}                     kd, kdescribe - describe {type}
 kgp - get pods                            kdp - describe pods
 kgs - get services                        kds - describe services
 kgi - get ingresses
 kgn - get nodes                           kdn - describe nodes

 ${bold}Pods${normal}                                      ${bold}Nodes${normal}
 -------------------------------------     ----------------------------------
 kpe - execute commands (i.e. /bin/sh)
 kpl - list                                knl - list
 klogs  - tail logs for a pod

 ${bold}Delete${normal}
 -------------------------------------
 knuke [option] - delete ${bold}all${normal} resources in a namespace, defaults to current namespace


 ${bold}Kustomize${normal}
 ----------------------------------------------------------------------------
 kustcreate - kustomize build | envsubst | kubectl create
 kustapply  - kustomize build | envsubst | kubectl apply
 kustdelete - kustomize build | envsubst | kubectl delete

 ${bold}Special${normal}
 ----------------------------------------------------------------------------
 pingdownload - download product or license to ~/Downloads
 kpf - port-forward in loop (e.g. kpf svc/pingdataconsole 8080:8080)
 ----------------------------------------------------------------------------
EOHELP
}

#TODO: add:
# kdelpo - delete all pods in namespace
# kdelall [option]- delete all [option] (pods, deployments, services) in namespace

## kubernetes
k () {
   _kubectlParams="$*"
   _kubeCTX=$(kubectl config current-context)
   _kubeNS=$(kubectl config view --minify --output 'jsonpath={..namespace}')
   _kubeNShelp=""

   test "${_kubeNS}" = "default" && _kubeNShelp=" (to set, use kubens {namespace})"

   while true; do
      test -z "$1" && break
      case "$1" in
         -n|--namespace)
            shift
            _kubeNS="$1"
            ;;
         -A)
            _kubeNS="ALL Namespaces"
            ;;
      esac
      shift
   done

   echo "Alias Expansion: ${bold}kubectl ${_kubectlParams}${normal}"
   echo "    k8s Context: ${bold}${_kubeCTX}${normal}"
   echo "  k8s Namespace: ${bold}${_kubeNS}${normal}${_kubeNShelp}"
   echo "--------------------------------------"

   # shellcheck disable=SC2086
   kubectl $_kubectlParams
}

## kubernetes general aliases
alias kall="k get pods,svc,deploy,rs,sts,job,ing,pvc"

alias kget="k get"
alias kg="kget"
alias kgp="kg pods"
alias kgs="kg services"
alias kgi="kg ingresses"
alias kgn="kg nodes"

alias kdescribe="k describe"
alias kd="kdescribe"
alias kdp="kd pods"
alias kds="kd services"
alias kdn="kd nodes"

## kubernetes pod aliases
alias kpe="k exec -it "
alias kpl="k get pods"
alias klogs="k logs -f "

## kubernetes nodes aliases
alias knl="k get nodes"

knuke() {
  if ! test -z "${1}"; then
    ns="${1}"
  else
    ns="$(kubectl get sa default -o jsonpath='{.metadata.namespace}')"
  fi
  echo "Are you sure you want to force-delete EVERYTHING in namespace: ${ns}. y/n"
  read -r nuke
  if test "${nuke}" = "y" || test "${nuke}" = "yes"; then
    echo "${bold}deploy nuke${normal}";
    kubectl delete pods,configmaps,secrets,jobs,cronjobs,statefulsets,deployments,persistentvolumeclaims,services,ingresses -n "$(kubectl get sa default -o jsonpath='{.metadata.namespace}')" --grace-period=0 --force --all
  else
    echo "crisis averted"
  fi
}


kustfunc() {
    _kubectlFunc="${1}"

    if ! test -z "${2}"; then
        _kustomizeBuildTarget="${2}"
    else
        _kustomizeBuildTarget="."
    fi

    _cmd="kustomize build ${_kustomizeBuildTarget} | envsubst | kubectl ${_kubectlFunc} -f -"

    echo "Alias Expansion: ${bold}$_cmd ${normal}"

    eval "${_cmd}"
}

alias kustapply="kustfunc apply"
alias kustcreate="kustfunc create"
alias kustdelete="kustfunc delete"

kpf () {
  while true
  do
    kubectl port-forward "${*}"
  done
}

kdelpo() {
  echo "Running command to: ${bold}Delete all pods${normal}";
  kubectl delete pods --all --force --grace-period=0 -n "$(kubectl get sa default -o jsonpath='{.metadata.namespace}')"
}

kdelall() {
  echo "Running command to: ${bold}Delete all ${1}${normal}";
  resource_types="pods|deployments|services|ingresses"
  case "${1}" in
    pods|deployments|services|ingresses)
      kubectl delete "${1}" --all --force --grace-period=0 -n "$(kubectl get sa default -o jsonpath='{.metadata.namespace}')"
    ;;
    *)
      echo "please pass a parameter: $resource_types"
    ;;
  esac
}

## vhelp
vhelp()
{
cat <<EOHELP
+----------------------------------------------------------------------------+
|                   ${bold}Ping Identity DevOps Vault Aliases${normal}
|
|  Following variables can be set by 'ping-devops config'
|
|           VAULT_ADDR: ${VAULT_ADDR}
|  VAULT_SECRET_PREFIX: ${VAULT_SECRET_PREFIX}
+----------------------------------------------------------------------------+
 ${bold}Vault Tokens${normal}
 ----------------------------------------------------------------------------
 ping-devops vault get-token     # Gets a vault token for vault commands
 vtoken                          # print current token info

 ${bold}Secrets${normal} - Vault kv helper aliases
 ----------------------------------------------------------------------------
 vls     {secret}                      # Lists secrets (default: all secrets)
 vget    {secret}                      # Gets secret
 vput    {secret} name=val @data.json  # Creates or updates full secret
 vpatch  {secret} name=val @data.json  # Updates/adds/remove name=vals from secret
 vdelete {secret}                      # Deletes secret

 Examples:
   ping-devops vault get-token         # Gets token
   vput test-secret A=B C=D            # Creates test-secret with 2 name/val
   vpatch test-secret E=F              # Adds name/val to test-secret
   vget test-secret                    # Prints out test-secret name/val
   vdelete test-secret                 # Deletes versions of test-secret
 ----------------------------------------------------------------------------
EOHELP
}

## vault
v()
{
   _vaultParams="$*"

   echo "Alias Expansion: ${bold}vault ${_vaultParams}${normal}"
   echo "     VAULT_ADDR: ${bold}${VAULT_ADDR}${normal}"
   echo "--------------------------------------"

   # shellcheck disable=SC2086
   vault $_vaultParams
}

alias vtoken="vault token lookup"

vlist_all()
{
  local readonly secretPath="${1}"

  vresult=$( vault kv list -format=json secret/$secretPath)

  if test $? -ne 0; then
    echo "${vresult}"
  fi

  for secret in $(echo "$vresult" | jq -r '.[]'); do
    case "${secret}" in
        */)
            vlist_all "${secretPath}${secret}"
            ;;
        *)
            echo "secret/${secretPath}${secret}"
            ;;
    esac
  done
}

vls()
{
  echo "Alias Expansion: ${bold}vault kv list secret/${VAULT_SECRET_PREFIX}/${*}${normal}"
  echo "     VAULT_ADDR: ${bold}${VAULT_ADDR}${normal}"
  echo "--------------------------------------"

  vlist_all ${VAULT_SECRET_PREFIX}/${*}
}


vget()
{
  v kv get secret/${VAULT_SECRET_PREFIX}/${*}
}


vput()
{
  v kv put secret/${VAULT_SECRET_PREFIX}/${*}
}

vpatch()
{
  v kv patch secret/${VAULT_SECRET_PREFIX}/${*}
}

vdelete()
{
  v kv delete secret/${VAULT_SECRET_PREFIX}/${*}
}

## hhelp
hhelp ()
{
cat <<EOHELP
+----------------------------------------------------------------------------+
|                   ${bold}Ping Identity DevOps Helm Aliases${normal}                        |
+----------------------------------------------------------------------------+

 ${bold}General Info${normal}                              ${bold}Chart Testing${normal}
 -------------------------------------     ----------------------------------
 hls - helm ls                             htest - helm dependency;
 hi  - helm install                                helm install --dry-run
 hup - helm upgrade
 hu  - helm uninstall

 h   - helm (incl k8s info)

 Examples (Available Helm Repos):
   h repo add ping-devops    https://helm.pingidentity.com/devops
   h repo add ping-demos     https://helm.pingidentity.com/demos
   h repo add ping-solutions https://helm.pingidentity.com/solutions

   h search repo      # List available charts
 ----------------------------------------------------------------------------


EOHELP
}

## helm
h()
{
   _helmParams="$*"

   _kubeCTX=$(kubectl config current-context)
   _kubeNS=$(kubectl config view --minify --output 'jsonpath={..namespace}')
   _kubeNShelp=""

   test "${_kubeNS}" = "default" && _kubeNShelp=" (to set, use kubens {namespace})"

   while true; do
      test -z "$1" && break
      case "$1" in
         -n|--namespace)
            shift
            _kubeNS="$1"
            ;;
         -A)
            _kubeNS="ALL Namespaces"
            ;;
      esac
      shift
   done

   echo "Alias Expansion: ${bold}helm ${_helmParams}${normal}"
   echo "    k8s Context: ${bold}${_kubeCTX}${normal}"
   echo "  k8s Namespace: ${bold}${_kubeNS}${normal}${_kubeNShelp}"
   echo "--------------------------------------"

   # shellcheck disable=SC2086
   helm $_helmParams
}

alias hls="h ls"
alias hi="h install"
alias hup="h upgrade"
alias hu="h uninstall"

htest()
{
  h dependency update ${1}
  h install test ${*} --dry-run
}

## sourcePingIdentityFiles
sourcePingIdentityFiles ()
{
    set -a
    # shellcheck disable=SC1090
    test -f "${HOME}/.pingidentity/devops" && \
        . "${HOME}/.pingidentity/devops"
    set +a
}

get_value ()
{
    # the following will preserve spaces in the printf
    IFS="%%"
    eval printf '%s' "\${${1}}"
    unset IFS
}


